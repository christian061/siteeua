// Configura√ß√£o do EmailJS
const EMAILJS_CONFIG = {
    PUBLIC_KEY: "w9UgEZ3aGXFWo2lNr",       // sua chave p√∫blica
    SERVICE_ID: "service_a436nr6",          // seu servi√ßo SMTP (Hostinger)
    TEMPLATE_ID: "template_h90o89q",        // template para RECEBER mensagens (empresa)
    CUSTOMER_TEMPLATE_ID: "template_48tdlu9" // template para RESPOSTA autom√°tica (cliente)
};

// Inicializar EmailJS
function initEmailJS() {
    if (typeof emailjs !== 'undefined') {
        emailjs.init(EMAILJS_CONFIG.PUBLIC_KEY);
        console.log("‚úÖ EmailJS inicializado");
    } else {
        console.error("‚ùå EmailJS n√£o encontrado");
    }
}

// Fun√ß√£o para enviar mensagem
async function sendContactForm(data) {
    console.log("üöÄ Iniciando envio de email...");
    console.log("üìã Dados recebidos:", data);
    console.log("üîß Configura√ß√£o EmailJS:", EMAILJS_CONFIG);
    
    try {
        // Verificar se EmailJS est√° inicializado
        if (typeof emailjs === 'undefined') {
            throw new Error("EmailJS n√£o est√° carregado");
        }

        const adminParams = {
            name: data.name,           
            user_email: data.email,    
            phone: data.phone,         
            service: data.service,     
            message: data.message,     
            data: new Date().toLocaleString('pt-BR'),
            reply_to: data.email       
        };

        console.log("üì§ Enviando email para empresa com params:", adminParams);
        
        // 1. Empresa recebe a mensagem
        await emailjs.send(
            EMAILJS_CONFIG.SERVICE_ID,
            EMAILJS_CONFIG.TEMPLATE_ID,
            adminParams
        );
        console.log("‚úÖ Email enviado para empresa com sucesso!");

        // Resposta autom√°tica para o cliente
        try {
            const customerParams = {
                name: data.name,           // {{name}} no template HTML
                to_email: data.email,      // Email do cliente (destinat√°rio) - usado pelo EmailJS para enviar
                message: data.message      // {{message}} no template HTML
            };

            console.log("üì§ Tentando resposta autom√°tica com params:", customerParams);
            console.log("üîß Usando SERVICE_ID:", EMAILJS_CONFIG.SERVICE_ID);
            console.log("üîß Usando CUSTOMER_TEMPLATE_ID:", EMAILJS_CONFIG.CUSTOMER_TEMPLATE_ID);

            // 2. Cliente recebe resposta autom√°tica
            const response = await emailjs.send(
                EMAILJS_CONFIG.SERVICE_ID,
                EMAILJS_CONFIG.CUSTOMER_TEMPLATE_ID,
                customerParams
            );
            console.log("‚úÖ Resposta autom√°tica enviada com sucesso!");
            console.log("üìß Response:", response);
        } catch (autoReplyError) {
            console.error("‚ö†Ô∏è ERRO na resposta autom√°tica:");
            console.error("- Tipo:", autoReplyError.name);
            console.error("- Mensagem:", autoReplyError.message);
            console.error("- Status:", autoReplyError.status);
            console.error("- Text:", autoReplyError.text);
            console.error("- Objeto completo:", autoReplyError);
            console.log("‚úÖ Email principal foi enviado com sucesso mesmo assim!");
        }

        return true;

    } catch (error) {
        console.error("‚ùå ERRO DETALHADO:");
        console.error("- Mensagem:", error.message);
        console.error("- Status:", error.status);
        console.error("- Text:", error.text);
        console.error("- Objeto completo:", error);
        return false;
    }
}

// A fun√ß√£o sendContactForm ser√° chamada pelo script.js
// N√£o precisa de event listener aqui para evitar conflitos

// Inicializar quando a p√°gina carregar
window.addEventListener("load", initEmailJS);
